/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface BrandDto
 */
export interface BrandDto {
    /**
     * 
     * @type {number}
     * @memberof BrandDto
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof BrandDto
     */
    'name': string;
}
/**
 * 
 * @export
 * @interface CarDto
 */
export interface CarDto {
    /**
     * 
     * @type {number}
     * @memberof CarDto
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof CarDto
     */
    'vin': string;
    /**
     * 
     * @type {string}
     * @memberof CarDto
     */
    'color': string;
    /**
     * 
     * @type {number}
     * @memberof CarDto
     */
    'mileage': number;
    /**
     * 
     * @type {CarModelDto}
     * @memberof CarDto
     */
    'carModel': CarModelDto;
    /**
     * 
     * @type {number}
     * @memberof CarDto
     */
    'yearManufacture': number;
    /**
     * 
     * @type {string}
     * @memberof CarDto
     */
    'licensePlate': string;
}
/**
 * 
 * @export
 * @interface CarModelDto
 */
export interface CarModelDto {
    /**
     * 
     * @type {number}
     * @memberof CarModelDto
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof CarModelDto
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof CarModelDto
     */
    'yearsPeriod': string;
    /**
     * 
     * @type {string}
     * @memberof CarModelDto
     */
    'generationType': string;
    /**
     * 
     * @type {CarTypeDto}
     * @memberof CarModelDto
     */
    'carType': CarTypeDto;
    /**
     * 
     * @type {BrandDto}
     * @memberof CarModelDto
     */
    'brand': BrandDto;
}
/**
 * 
 * @export
 * @interface CarTypeDto
 */
export interface CarTypeDto {
    /**
     * 
     * @type {number}
     * @memberof CarTypeDto
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof CarTypeDto
     */
    'name': string;
}
/**
 * 
 * @export
 * @interface EngineDto
 */
export interface EngineDto {
    /**
     * 
     * @type {number}
     * @memberof EngineDto
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof EngineDto
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof EngineDto
     */
    'type': string;
    /**
     * 
     * @type {number}
     * @memberof EngineDto
     */
    'horsepower': number;
    /**
     * 
     * @type {CarModelDto}
     * @memberof EngineDto
     */
    'carModel': CarModelDto;
}

/**
 * BrandApi - axios parameter creator
 * @export
 */
export const BrandApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {BrandDto} brandDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createBrand: async (brandDto: BrandDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'brandDto' is not null or undefined
            assertParamExists('createBrand', 'brandDto', brandDto)
            const localVarPath = `/api/brand`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(brandDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteBrand: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteBrand', 'id', id)
            const localVarPath = `/api/brand/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [sortBy] 
         * @param {string} [direction] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllBrands: async (sortBy?: string, direction?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/brand`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (sortBy !== undefined) {
                localVarQueryParameter['sortBy'] = sortBy;
            }

            if (direction !== undefined) {
                localVarQueryParameter['direction'] = direction;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBrandById: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getBrandById', 'id', id)
            const localVarPath = `/api/brand/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {BrandDto} brandDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateBrand: async (id: number, brandDto: BrandDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateBrand', 'id', id)
            // verify required parameter 'brandDto' is not null or undefined
            assertParamExists('updateBrand', 'brandDto', brandDto)
            const localVarPath = `/api/brand/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(brandDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * BrandApi - functional programming interface
 * @export
 */
export const BrandApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = BrandApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {BrandDto} brandDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createBrand(brandDto: BrandDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BrandDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createBrand(brandDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BrandApi.createBrand']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteBrand(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BrandDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteBrand(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BrandApi.deleteBrand']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} [sortBy] 
         * @param {string} [direction] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllBrands(sortBy?: string, direction?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<BrandDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllBrands(sortBy, direction, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BrandApi.getAllBrands']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getBrandById(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BrandDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getBrandById(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BrandApi.getBrandById']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {BrandDto} brandDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateBrand(id: number, brandDto: BrandDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BrandDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateBrand(id, brandDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BrandApi.updateBrand']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * BrandApi - factory interface
 * @export
 */
export const BrandApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = BrandApiFp(configuration)
    return {
        /**
         * 
         * @param {BrandDto} brandDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createBrand(brandDto: BrandDto, options?: RawAxiosRequestConfig): AxiosPromise<BrandDto> {
            return localVarFp.createBrand(brandDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteBrand(id: number, options?: RawAxiosRequestConfig): AxiosPromise<BrandDto> {
            return localVarFp.deleteBrand(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [sortBy] 
         * @param {string} [direction] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllBrands(sortBy?: string, direction?: string, options?: RawAxiosRequestConfig): AxiosPromise<Array<BrandDto>> {
            return localVarFp.getAllBrands(sortBy, direction, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBrandById(id: number, options?: RawAxiosRequestConfig): AxiosPromise<BrandDto> {
            return localVarFp.getBrandById(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {BrandDto} brandDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateBrand(id: number, brandDto: BrandDto, options?: RawAxiosRequestConfig): AxiosPromise<BrandDto> {
            return localVarFp.updateBrand(id, brandDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * BrandApi - object-oriented interface
 * @export
 * @class BrandApi
 * @extends {BaseAPI}
 */
export class BrandApi extends BaseAPI {
    /**
     * 
     * @param {BrandDto} brandDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BrandApi
     */
    public createBrand(brandDto: BrandDto, options?: RawAxiosRequestConfig) {
        return BrandApiFp(this.configuration).createBrand(brandDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BrandApi
     */
    public deleteBrand(id: number, options?: RawAxiosRequestConfig) {
        return BrandApiFp(this.configuration).deleteBrand(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} [sortBy] 
     * @param {string} [direction] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BrandApi
     */
    public getAllBrands(sortBy?: string, direction?: string, options?: RawAxiosRequestConfig) {
        return BrandApiFp(this.configuration).getAllBrands(sortBy, direction, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BrandApi
     */
    public getBrandById(id: number, options?: RawAxiosRequestConfig) {
        return BrandApiFp(this.configuration).getBrandById(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {BrandDto} brandDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BrandApi
     */
    public updateBrand(id: number, brandDto: BrandDto, options?: RawAxiosRequestConfig) {
        return BrandApiFp(this.configuration).updateBrand(id, brandDto, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * CarApi - axios parameter creator
 * @export
 */
export const CarApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {CarDto} carDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCar: async (carDto: CarDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'carDto' is not null or undefined
            assertParamExists('createCar', 'carDto', carDto)
            const localVarPath = `/api/car`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(carDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCar: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteCar', 'id', id)
            const localVarPath = `/api/car/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [sortBy] 
         * @param {string} [direction] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllCars: async (sortBy?: string, direction?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/car`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (sortBy !== undefined) {
                localVarQueryParameter['sortBy'] = sortBy;
            }

            if (direction !== undefined) {
                localVarQueryParameter['direction'] = direction;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCarById: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getCarById', 'id', id)
            const localVarPath = `/api/car/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {CarDto} carDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCar: async (id: number, carDto: CarDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateCar', 'id', id)
            // verify required parameter 'carDto' is not null or undefined
            assertParamExists('updateCar', 'carDto', carDto)
            const localVarPath = `/api/car/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(carDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CarApi - functional programming interface
 * @export
 */
export const CarApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CarApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {CarDto} carDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createCar(carDto: CarDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CarDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createCar(carDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CarApi.createCar']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteCar(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CarDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteCar(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CarApi.deleteCar']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} [sortBy] 
         * @param {string} [direction] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllCars(sortBy?: string, direction?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CarDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllCars(sortBy, direction, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CarApi.getAllCars']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCarById(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CarDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCarById(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CarApi.getCarById']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {CarDto} carDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateCar(id: number, carDto: CarDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CarDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateCar(id, carDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CarApi.updateCar']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * CarApi - factory interface
 * @export
 */
export const CarApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CarApiFp(configuration)
    return {
        /**
         * 
         * @param {CarDto} carDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCar(carDto: CarDto, options?: RawAxiosRequestConfig): AxiosPromise<CarDto> {
            return localVarFp.createCar(carDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCar(id: number, options?: RawAxiosRequestConfig): AxiosPromise<CarDto> {
            return localVarFp.deleteCar(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [sortBy] 
         * @param {string} [direction] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllCars(sortBy?: string, direction?: string, options?: RawAxiosRequestConfig): AxiosPromise<Array<CarDto>> {
            return localVarFp.getAllCars(sortBy, direction, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCarById(id: number, options?: RawAxiosRequestConfig): AxiosPromise<CarDto> {
            return localVarFp.getCarById(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {CarDto} carDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCar(id: number, carDto: CarDto, options?: RawAxiosRequestConfig): AxiosPromise<CarDto> {
            return localVarFp.updateCar(id, carDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CarApi - object-oriented interface
 * @export
 * @class CarApi
 * @extends {BaseAPI}
 */
export class CarApi extends BaseAPI {
    /**
     * 
     * @param {CarDto} carDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CarApi
     */
    public createCar(carDto: CarDto, options?: RawAxiosRequestConfig) {
        return CarApiFp(this.configuration).createCar(carDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CarApi
     */
    public deleteCar(id: number, options?: RawAxiosRequestConfig) {
        return CarApiFp(this.configuration).deleteCar(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} [sortBy] 
     * @param {string} [direction] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CarApi
     */
    public getAllCars(sortBy?: string, direction?: string, options?: RawAxiosRequestConfig) {
        return CarApiFp(this.configuration).getAllCars(sortBy, direction, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CarApi
     */
    public getCarById(id: number, options?: RawAxiosRequestConfig) {
        return CarApiFp(this.configuration).getCarById(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {CarDto} carDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CarApi
     */
    public updateCar(id: number, carDto: CarDto, options?: RawAxiosRequestConfig) {
        return CarApiFp(this.configuration).updateCar(id, carDto, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * CarModelApi - axios parameter creator
 * @export
 */
export const CarModelApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {CarModelDto} carModelDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCarModel: async (carModelDto: CarModelDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'carModelDto' is not null or undefined
            assertParamExists('createCarModel', 'carModelDto', carModelDto)
            const localVarPath = `/api/carModel`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(carModelDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCarModel: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteCarModel', 'id', id)
            const localVarPath = `/api/carModel/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [sortBy] 
         * @param {string} [direction] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllCarModels: async (sortBy?: string, direction?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/carModel`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (sortBy !== undefined) {
                localVarQueryParameter['sortBy'] = sortBy;
            }

            if (direction !== undefined) {
                localVarQueryParameter['direction'] = direction;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCarModelById: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getCarModelById', 'id', id)
            const localVarPath = `/api/carModel/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {CarModelDto} carModelDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCarModel: async (id: number, carModelDto: CarModelDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateCarModel', 'id', id)
            // verify required parameter 'carModelDto' is not null or undefined
            assertParamExists('updateCarModel', 'carModelDto', carModelDto)
            const localVarPath = `/api/carModel/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(carModelDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CarModelApi - functional programming interface
 * @export
 */
export const CarModelApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CarModelApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {CarModelDto} carModelDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createCarModel(carModelDto: CarModelDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CarModelDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createCarModel(carModelDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CarModelApi.createCarModel']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteCarModel(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CarModelDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteCarModel(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CarModelApi.deleteCarModel']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} [sortBy] 
         * @param {string} [direction] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllCarModels(sortBy?: string, direction?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CarModelDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllCarModels(sortBy, direction, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CarModelApi.getAllCarModels']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCarModelById(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CarModelDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCarModelById(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CarModelApi.getCarModelById']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {CarModelDto} carModelDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateCarModel(id: number, carModelDto: CarModelDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CarModelDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateCarModel(id, carModelDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CarModelApi.updateCarModel']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * CarModelApi - factory interface
 * @export
 */
export const CarModelApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CarModelApiFp(configuration)
    return {
        /**
         * 
         * @param {CarModelDto} carModelDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCarModel(carModelDto: CarModelDto, options?: RawAxiosRequestConfig): AxiosPromise<CarModelDto> {
            return localVarFp.createCarModel(carModelDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCarModel(id: number, options?: RawAxiosRequestConfig): AxiosPromise<CarModelDto> {
            return localVarFp.deleteCarModel(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [sortBy] 
         * @param {string} [direction] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllCarModels(sortBy?: string, direction?: string, options?: RawAxiosRequestConfig): AxiosPromise<Array<CarModelDto>> {
            return localVarFp.getAllCarModels(sortBy, direction, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCarModelById(id: number, options?: RawAxiosRequestConfig): AxiosPromise<CarModelDto> {
            return localVarFp.getCarModelById(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {CarModelDto} carModelDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCarModel(id: number, carModelDto: CarModelDto, options?: RawAxiosRequestConfig): AxiosPromise<CarModelDto> {
            return localVarFp.updateCarModel(id, carModelDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CarModelApi - object-oriented interface
 * @export
 * @class CarModelApi
 * @extends {BaseAPI}
 */
export class CarModelApi extends BaseAPI {
    /**
     * 
     * @param {CarModelDto} carModelDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CarModelApi
     */
    public createCarModel(carModelDto: CarModelDto, options?: RawAxiosRequestConfig) {
        return CarModelApiFp(this.configuration).createCarModel(carModelDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CarModelApi
     */
    public deleteCarModel(id: number, options?: RawAxiosRequestConfig) {
        return CarModelApiFp(this.configuration).deleteCarModel(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} [sortBy] 
     * @param {string} [direction] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CarModelApi
     */
    public getAllCarModels(sortBy?: string, direction?: string, options?: RawAxiosRequestConfig) {
        return CarModelApiFp(this.configuration).getAllCarModels(sortBy, direction, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CarModelApi
     */
    public getCarModelById(id: number, options?: RawAxiosRequestConfig) {
        return CarModelApiFp(this.configuration).getCarModelById(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {CarModelDto} carModelDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CarModelApi
     */
    public updateCarModel(id: number, carModelDto: CarModelDto, options?: RawAxiosRequestConfig) {
        return CarModelApiFp(this.configuration).updateCarModel(id, carModelDto, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * CarTypeApi - axios parameter creator
 * @export
 */
export const CarTypeApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {CarTypeDto} carTypeDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCarType: async (carTypeDto: CarTypeDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'carTypeDto' is not null or undefined
            assertParamExists('createCarType', 'carTypeDto', carTypeDto)
            const localVarPath = `/api/carType`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(carTypeDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCarType: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteCarType', 'id', id)
            const localVarPath = `/api/carType/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [sortBy] 
         * @param {string} [direction] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllCarTypes: async (sortBy?: string, direction?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/carType`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (sortBy !== undefined) {
                localVarQueryParameter['sortBy'] = sortBy;
            }

            if (direction !== undefined) {
                localVarQueryParameter['direction'] = direction;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCarTypeById: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getCarTypeById', 'id', id)
            const localVarPath = `/api/carType/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {CarTypeDto} carTypeDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCarType: async (id: number, carTypeDto: CarTypeDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateCarType', 'id', id)
            // verify required parameter 'carTypeDto' is not null or undefined
            assertParamExists('updateCarType', 'carTypeDto', carTypeDto)
            const localVarPath = `/api/carType/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(carTypeDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CarTypeApi - functional programming interface
 * @export
 */
export const CarTypeApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CarTypeApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {CarTypeDto} carTypeDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createCarType(carTypeDto: CarTypeDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CarTypeDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createCarType(carTypeDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CarTypeApi.createCarType']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteCarType(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CarTypeDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteCarType(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CarTypeApi.deleteCarType']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} [sortBy] 
         * @param {string} [direction] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllCarTypes(sortBy?: string, direction?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CarTypeDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllCarTypes(sortBy, direction, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CarTypeApi.getAllCarTypes']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCarTypeById(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CarTypeDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCarTypeById(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CarTypeApi.getCarTypeById']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {CarTypeDto} carTypeDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateCarType(id: number, carTypeDto: CarTypeDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CarTypeDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateCarType(id, carTypeDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CarTypeApi.updateCarType']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * CarTypeApi - factory interface
 * @export
 */
export const CarTypeApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CarTypeApiFp(configuration)
    return {
        /**
         * 
         * @param {CarTypeDto} carTypeDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCarType(carTypeDto: CarTypeDto, options?: RawAxiosRequestConfig): AxiosPromise<CarTypeDto> {
            return localVarFp.createCarType(carTypeDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCarType(id: number, options?: RawAxiosRequestConfig): AxiosPromise<CarTypeDto> {
            return localVarFp.deleteCarType(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [sortBy] 
         * @param {string} [direction] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllCarTypes(sortBy?: string, direction?: string, options?: RawAxiosRequestConfig): AxiosPromise<Array<CarTypeDto>> {
            return localVarFp.getAllCarTypes(sortBy, direction, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCarTypeById(id: number, options?: RawAxiosRequestConfig): AxiosPromise<CarTypeDto> {
            return localVarFp.getCarTypeById(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {CarTypeDto} carTypeDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCarType(id: number, carTypeDto: CarTypeDto, options?: RawAxiosRequestConfig): AxiosPromise<CarTypeDto> {
            return localVarFp.updateCarType(id, carTypeDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CarTypeApi - object-oriented interface
 * @export
 * @class CarTypeApi
 * @extends {BaseAPI}
 */
export class CarTypeApi extends BaseAPI {
    /**
     * 
     * @param {CarTypeDto} carTypeDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CarTypeApi
     */
    public createCarType(carTypeDto: CarTypeDto, options?: RawAxiosRequestConfig) {
        return CarTypeApiFp(this.configuration).createCarType(carTypeDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CarTypeApi
     */
    public deleteCarType(id: number, options?: RawAxiosRequestConfig) {
        return CarTypeApiFp(this.configuration).deleteCarType(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} [sortBy] 
     * @param {string} [direction] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CarTypeApi
     */
    public getAllCarTypes(sortBy?: string, direction?: string, options?: RawAxiosRequestConfig) {
        return CarTypeApiFp(this.configuration).getAllCarTypes(sortBy, direction, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CarTypeApi
     */
    public getCarTypeById(id: number, options?: RawAxiosRequestConfig) {
        return CarTypeApiFp(this.configuration).getCarTypeById(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {CarTypeDto} carTypeDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CarTypeApi
     */
    public updateCarType(id: number, carTypeDto: CarTypeDto, options?: RawAxiosRequestConfig) {
        return CarTypeApiFp(this.configuration).updateCarType(id, carTypeDto, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * EngineApi - axios parameter creator
 * @export
 */
export const EngineApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {EngineDto} engineDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEngine: async (engineDto: EngineDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'engineDto' is not null or undefined
            assertParamExists('createEngine', 'engineDto', engineDto)
            const localVarPath = `/api/engine`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(engineDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEngine: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteEngine', 'id', id)
            const localVarPath = `/api/engine/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [sortBy] 
         * @param {string} [direction] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllEngines: async (sortBy?: string, direction?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/engine`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (sortBy !== undefined) {
                localVarQueryParameter['sortBy'] = sortBy;
            }

            if (direction !== undefined) {
                localVarQueryParameter['direction'] = direction;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEngineById: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getEngineById', 'id', id)
            const localVarPath = `/api/engine/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {EngineDto} engineDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEngine: async (id: number, engineDto: EngineDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateEngine', 'id', id)
            // verify required parameter 'engineDto' is not null or undefined
            assertParamExists('updateEngine', 'engineDto', engineDto)
            const localVarPath = `/api/engine/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(engineDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * EngineApi - functional programming interface
 * @export
 */
export const EngineApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = EngineApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {EngineDto} engineDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createEngine(engineDto: EngineDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EngineDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createEngine(engineDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['EngineApi.createEngine']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteEngine(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EngineDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteEngine(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['EngineApi.deleteEngine']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} [sortBy] 
         * @param {string} [direction] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllEngines(sortBy?: string, direction?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<EngineDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllEngines(sortBy, direction, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['EngineApi.getAllEngines']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getEngineById(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EngineDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getEngineById(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['EngineApi.getEngineById']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {EngineDto} engineDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateEngine(id: number, engineDto: EngineDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EngineDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateEngine(id, engineDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['EngineApi.updateEngine']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * EngineApi - factory interface
 * @export
 */
export const EngineApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = EngineApiFp(configuration)
    return {
        /**
         * 
         * @param {EngineDto} engineDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEngine(engineDto: EngineDto, options?: RawAxiosRequestConfig): AxiosPromise<EngineDto> {
            return localVarFp.createEngine(engineDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEngine(id: number, options?: RawAxiosRequestConfig): AxiosPromise<EngineDto> {
            return localVarFp.deleteEngine(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [sortBy] 
         * @param {string} [direction] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllEngines(sortBy?: string, direction?: string, options?: RawAxiosRequestConfig): AxiosPromise<Array<EngineDto>> {
            return localVarFp.getAllEngines(sortBy, direction, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEngineById(id: number, options?: RawAxiosRequestConfig): AxiosPromise<EngineDto> {
            return localVarFp.getEngineById(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {EngineDto} engineDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEngine(id: number, engineDto: EngineDto, options?: RawAxiosRequestConfig): AxiosPromise<EngineDto> {
            return localVarFp.updateEngine(id, engineDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * EngineApi - object-oriented interface
 * @export
 * @class EngineApi
 * @extends {BaseAPI}
 */
export class EngineApi extends BaseAPI {
    /**
     * 
     * @param {EngineDto} engineDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EngineApi
     */
    public createEngine(engineDto: EngineDto, options?: RawAxiosRequestConfig) {
        return EngineApiFp(this.configuration).createEngine(engineDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EngineApi
     */
    public deleteEngine(id: number, options?: RawAxiosRequestConfig) {
        return EngineApiFp(this.configuration).deleteEngine(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} [sortBy] 
     * @param {string} [direction] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EngineApi
     */
    public getAllEngines(sortBy?: string, direction?: string, options?: RawAxiosRequestConfig) {
        return EngineApiFp(this.configuration).getAllEngines(sortBy, direction, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EngineApi
     */
    public getEngineById(id: number, options?: RawAxiosRequestConfig) {
        return EngineApiFp(this.configuration).getEngineById(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {EngineDto} engineDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EngineApi
     */
    public updateEngine(id: number, engineDto: EngineDto, options?: RawAxiosRequestConfig) {
        return EngineApiFp(this.configuration).updateEngine(id, engineDto, options).then((request) => request(this.axios, this.basePath));
    }
}



